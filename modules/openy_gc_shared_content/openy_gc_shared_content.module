<?php

/**
 * @file
 * Contains openy_gc_shared_content.module.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function openy_gc_shared_content_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the openy_gc_shared_content module.
    case 'help.page.openy_gc_shared_content':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Virtual Y Shared Content') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_field_storage_info().
 */
function openy_gc_shared_content_entity_base_field_info(EntityTypeInterface $entity_type) {
  $shareable_entity_types = [
    'node',
    'eventseries',
    'eventinstance',
  ];
  if (!in_array($entity_type->id(), $shareable_entity_types)) {
    return [];
  }
  $fields = [];
  $fields['field_gc_share'] = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Available to share'))
    ->setCustomStorage(FALSE)
    ->setCardinality(1)
    ->setProvider('openy_gc_shared_content')
    ->setTargetEntityTypeId($entity_type->id())
    ->setName('field_gc_share')
    ->setRequired(FALSE)
    ->setRevisionable(FALSE)
    ->setTranslatable(FALSE)
    ->setDisplayConfigurable('view', FALSE)
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'boolean_checkbox',
      'settings' => [
        'display_label' => TRUE,
      ],
    ]);
  $fields['field_gc_origin'] = BaseFieldDefinition::create('string')
    ->setLabel(t('Origin'))
    ->setCustomStorage(FALSE)
    ->setCardinality(1)
    ->setProvider('openy_gc_shared_content')
    ->setName('field_gc_origin')
    ->setTargetEntityTypeId($entity_type->id())
    ->setRequired(FALSE)
    ->setRevisionable(FALSE)
    ->setTranslatable(FALSE)
    ->setDisplayConfigurable('view', FALSE)
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'string_textfield',
      'settings' => [
        'size' => '255',
      ],
    ]);
  return $fields;
}

/**
 * Implements hook_entity_bundle_field_info().
 */
function openy_gc_shared_content_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle) {
  $plugins_info = [];
  $shared_content_manager = \Drupal::service('plugin.manager.shared_content_source_type');
  foreach ($shared_content_manager->getDefinitions() as $plugin_id => $plugin) {
    $instance = $shared_content_manager->createInstance($plugin_id);
    $plugins_info[$instance->getEntityType()][] = $instance->getEntityBundle();
  }

  if (!isset($plugins_info[$entity_type->id()])) {
    return [];
  }
  $managed_bundles = $plugins_info[$entity_type->id()];
  if (!in_array($bundle, $managed_bundles)) {
    return [];
  }
  $fields = [];
  foreach (openy_gc_shared_content_entity_base_field_info($entity_type) as $name => $definition) {
    $fields[$name] = $definition;
  }
  return $fields;
}

/**
 * Implements hook_form_alter().
 *
 * Move field_alert_belongs field to sidebar details in advanced section.
 */
function openy_gc_shared_content_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (!isset($form['field_gc_share'], $form['field_gc_origin'])) {
    return;
  }

  $allowed_forms_list = [];
  $shared_content_manager = \Drupal::service('plugin.manager.shared_content_source_type');
  foreach ($shared_content_manager->getDefinitions() as $plugin_id => $plugin) {
    $instance = $shared_content_manager->createInstance($plugin_id);
    $allowed_forms_list[] = $instance->getEntityType() . '_' . $instance->getEntityBundle() . '_form';
    $allowed_forms_list[] = $instance->getEntityType() . '_' . $instance->getEntityBundle() . '_edit_form';
  }

  $form['shared_content_settings'] = [
    '#type' => 'details',
    '#title' => t('Shared content'),
    '#description' => t('Here you can allow this content for sharing with configured servers.'),
    '#open' => FALSE,
    '#group' => 'advanced',
    '#weight' => 125,
  ];

  $form['field_gc_share']['#group'] = 'shared_content_settings';
  $form['field_gc_origin']['#group'] = 'shared_content_settings';
  // Disable origin field from editing.
  $form['field_gc_origin']['widget'][0]['value']['#attributes']['disabled'] = TRUE;

  if (!in_array($form_id, $allowed_forms_list)) {
    // Close access to shared_content_settings if there is no plugin for
    // entity bundle.
    $form['shared_content_settings']['#access'] = FALSE;
    return;
  }
}

/**
 * Implements hook_theme().
 */
function openy_gc_shared_content_theme($existing, $type, $theme, $path) {
  return [
    'openy_gc_shared_content__vy_blog_post' => [
      'variables' => [
        'title' => NULL,
        'field_gc_video_category' => NULL,
        'description' => NULL,
        'image' => NULL,
        'server' => NULL,
      ],
    ],
    'openy_gc_shared_content__gc_video' => [
      'variables' => [
        'title' => NULL,
        'description' => NULL,
        'field_gc_video_level' => NULL,
        'field_gc_video_instructor' => NULL,
        'field_gc_video_category' => NULL,
        'field_gc_video_equipment' => [],
        'field_gc_video_media' => NULL,
        'server' => NULL,
      ],
    ],
  ];
}
